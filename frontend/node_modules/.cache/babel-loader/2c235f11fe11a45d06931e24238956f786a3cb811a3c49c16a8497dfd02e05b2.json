{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport axios from 'axios';\nimport { Line as LineChartGenerator } from \"vue-chartjs/legacy\";\nimport { Chart as ChartJS, Title, Tooltip, Legend, LineElement, LinearScale, CategoryScale, PointElement } from 'chart.js';\nvar API_URL = 'http://localhost:8000/devices';\nChartJS.register(Title, Tooltip, Legend, LineElement, LinearScale, CategoryScale, PointElement);\nexport default {\n  name: 'LineChart',\n  components: {\n    LineChartGenerator: LineChartGenerator\n  },\n  props: {\n    chartId: {\n      type: String,\n      \"default\": 'line-chart'\n    },\n    datasetIdKey: {\n      type: String,\n      \"default\": 'label'\n    },\n    width: {\n      type: Number,\n      \"default\": 400\n    },\n    height: {\n      type: Number,\n      \"default\": 400\n    },\n    cssClasses: {\n      \"default\": '',\n      type: String\n    },\n    styles: {\n      type: Object,\n      \"default\": function _default() {}\n    },\n    plugins: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      loggedInUser: '',\n      // 로그인한 사용자 이름 저장\n      urlinfo: 'http://localhost:8000/devices',\n      deviceInfo: {\n        _id: null,\n        deviceId: null,\n        name: null,\n        latitude: null,\n        longitude: null,\n        description: null,\n        register_date: null\n      },\n      chartData: {\n        datasets: [{\n          label: '벤치프레스',\n          backgroundColor: 'f87979',\n          data: []\n        }, {\n          label: '데드리프트',\n          backgroundColor: 'f87979',\n          data: []\n        }, {\n          label: '스쿼트',\n          backgroundColor: 'f87979',\n          data: []\n        }]\n      },\n      chartOptions: {\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    };\n  },\n  created: function created() {\n    var _this = this;\n    var storedUserName = localStorage.getItem('userName');\n    if (storedUserName) {\n      this.loggedInUser = storedUserName;\n      axios.get(this.urlinfo).then(function (res) {\n        // 저장된 사용자 이름과 일치하는 데이터만 필터링해서 표시합니다.\n        _this.items = res.data.filter(function (item) {\n          return item.deviceId === _this.loggedInUser;\n        }).map(function (item) {\n          return {\n            _id: item._id,\n            deviceId: item.deviceId,\n            name: item.name,\n            latitude: item.latitude,\n            longitude: item.longitude,\n            description: item.description,\n            register_date: _this.formatDate(item.register_date)\n          };\n        });\n      })[\"catch\"](function (err) {\n        alert('에러 발생: ' + err); // 에러 발생\n      });\n    }\n  },\n  mounted: function mounted() {\n    console.log(this.chartData);\n  },\n  // 코드 일부분\n  methods: {\n    updateChartData: function updateChartData(selectedExercise) {\n      var _this2 = this;\n      axios.get(API_URL).then(function (response) {\n        var data = response.data;\n\n        // Filter data based on selected exercise (latitude)\n        var exerciseData = data.filter(function (item) {\n          return item.latitude === selectedExercise;\n        });\n\n        // Set labels and data for the selected exercise category\n        _this2.chartData.labels = exerciseData.map(function (item) {\n          var date = new Date(item.register_date);\n          return \"\".concat(date.getMonth() + 1, \"/\").concat(date.getDate(), \"/\").concat(date.getFullYear());\n        });\n        _this2.chartData.datasets = [{\n          label: selectedExercise,\n          backgroundColor: _this2.getBackgroundColor(selectedExercise),\n          borderColor: _this2.getBorderColor(selectedExercise),\n          data: exerciseData.map(function (item) {\n            return item.longitude;\n          })\n        }];\n      })[\"catch\"](function (err) {\n        alert('에러 발생: ' + err);\n      });\n    },\n    getBackgroundColor: function getBackgroundColor(selectedExercise) {\n      switch (selectedExercise) {\n        case '벤치프레스':\n          return '#3498db';\n        // Blue\n        case '데드리프트':\n          return '#e74c3c';\n        // Red\n        case '스쿼트':\n          return '#2ecc71';\n        // Green\n        default:\n          return '#3498db';\n        // Default Blue\n      }\n    },\n    getBorderColor: function getBorderColor(selectedExercise) {\n      switch (selectedExercise) {\n        case '벤치프레스':\n          return '#2980b9';\n        // Darker Blue\n        case '데드리프트':\n          return '#c0392b';\n        // Darker Red\n        case '스쿼트':\n          return '#27ae60';\n        // Darker Green\n        default:\n          return '#2980b9';\n        // Default Darker Blue\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","Line","LineChartGenerator","Chart","ChartJS","Title","Tooltip","Legend","LineElement","LinearScale","CategoryScale","PointElement","API_URL","register","name","components","props","chartId","type","String","datasetIdKey","width","Number","height","cssClasses","styles","Object","_default","plugins","Array","data","loggedInUser","urlinfo","deviceInfo","_id","deviceId","latitude","longitude","description","register_date","chartData","datasets","label","backgroundColor","chartOptions","responsive","maintainAspectRatio","created","_this","storedUserName","localStorage","getItem","get","then","res","items","filter","item","map","formatDate","err","alert","mounted","console","log","methods","updateChartData","selectedExercise","_this2","response","exerciseData","labels","date","Date","concat","getMonth","getDate","getFullYear","getBackgroundColor","borderColor","getBorderColor"],"sources":["src/components/DataChart2.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"chart-container\">\r\n      <LineChartGenerator id=\"my-chart-id\" :chart-options=\"chartOptions\" :chart-data=\"chartData\" :chart-id=\"chartId\"\r\n        :dataset-id-key=\"datasetIdKey\" :plugins=\"plugins\" :css-classes=\"cssClasses\" :styles=\"styles\" :width=\"width\"\r\n        :height=\"height\"/>\r\n    </div>\r\n\r\n    <div class=\"button-container\">\r\n      <button @click=\"updateChartData('벤치프레스')\" class=\"cute-button\">벤치프레스</button>\r\n      <button @click=\"updateChartData('데드리프트')\" class=\"cute-button\">데드리프트</button>\r\n      <button @click=\"updateChartData('스쿼트')\" class=\"cute-button\">스쿼트</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\n\r\nimport axios from 'axios'\r\nimport { Line as LineChartGenerator } from \"vue-chartjs/legacy\"\r\nimport { Chart as ChartJS, Title, Tooltip, Legend, LineElement, LinearScale, CategoryScale, PointElement } from 'chart.js'\r\n\r\nconst API_URL = 'http://localhost:8000/devices'\r\n\r\nChartJS.register(Title,\r\n  Tooltip, Legend, LineElement, LinearScale, CategoryScale, PointElement)\r\n\r\nexport default {\r\n  name: 'LineChart',\r\n  components: { LineChartGenerator },\r\n  props: {\r\n    chartId: {\r\n      type: String,\r\n      default: 'line-chart'\r\n    },\r\n    datasetIdKey: {\r\n      type: String,\r\n      default: 'label'\r\n    },\r\n    width: {\r\n      type: Number,\r\n      default: 400\r\n    },\r\n    height: {\r\n      type: Number,\r\n      default: 400\r\n    },\r\n    cssClasses: {\r\n      default: '',\r\n      type: String\r\n    },\r\n    styles: {\r\n      type: Object,\r\n      default: () => { }\r\n    },\r\n    plugins: {\r\n      type: Array,\r\n      default: () => []\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      loggedInUser: '', // 로그인한 사용자 이름 저장\r\n      urlinfo: 'http://localhost:8000/devices',\r\n      deviceInfo: {\r\n        _id: null,\r\n        deviceId: null,\r\n        name: null,\r\n        latitude: null,\r\n        longitude: null,\r\n        description: null,\r\n        register_date: null\r\n      },\r\n      \r\n      chartData: {\r\n\r\n        datasets: [\r\n          {\r\n            label: '벤치프레스',\r\n            backgroundColor: 'f87979',\r\n            data: []\r\n          },\r\n          {\r\n            label: '데드리프트',\r\n            backgroundColor: 'f87979',\r\n            data: []\r\n          },\r\n          {\r\n            label: '스쿼트',\r\n            backgroundColor: 'f87979',\r\n            data: []\r\n          }\r\n        ]\r\n      },\r\n      chartOptions: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    const storedUserName = localStorage.getItem('userName');\r\n\r\n    if (storedUserName) {\r\n      this.loggedInUser = storedUserName;\r\n\r\n      axios.get(this.urlinfo)\r\n        .then((res) => {\r\n          // 저장된 사용자 이름과 일치하는 데이터만 필터링해서 표시합니다.\r\n          this.items = res.data\r\n            .filter(item => item.deviceId === this.loggedInUser)\r\n            .map(item => {\r\n              return {\r\n                _id: item._id,\r\n                deviceId: item.deviceId,\r\n                name: item.name,\r\n                latitude: item.latitude,\r\n                longitude: item.longitude,\r\n                description: item.description,\r\n                register_date: this.formatDate(item.register_date)\r\n              };\r\n            });\r\n        })\r\n        .catch((err) => {\r\n          alert('에러 발생: ' + err); // 에러 발생\r\n        });\r\n    }\r\n  },\r\n  mounted() {\r\n    console.log(this.chartData)\r\n  },\r\n  // 코드 일부분\r\n  methods: {\r\n    \r\n    updateChartData(selectedExercise) {\r\n      axios.get(API_URL)\r\n        .then((response) => {\r\n          const data = response.data;\r\n\r\n          // Filter data based on selected exercise (latitude)\r\n          const exerciseData = data.filter(item => item.latitude === selectedExercise);\r\n\r\n          // Set labels and data for the selected exercise category\r\n          this.chartData.labels = exerciseData.map(item => {\r\n            const date = new Date(item.register_date);\r\n            return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\r\n          });\r\n\r\n          this.chartData.datasets = [\r\n            {\r\n              label: selectedExercise,\r\n              backgroundColor: this.getBackgroundColor(selectedExercise),\r\n              borderColor: this.getBorderColor(selectedExercise),\r\n              data: exerciseData.map(item => item.longitude)\r\n            }\r\n          ];\r\n        })\r\n        .catch((err) => {\r\n          alert('에러 발생: ' + err);\r\n        });\r\n    },\r\n\r\n    getBackgroundColor(selectedExercise) {\r\n      switch (selectedExercise) {\r\n        case '벤치프레스':\r\n          return '#3498db'; // Blue\r\n        case '데드리프트':\r\n          return '#e74c3c'; // Red\r\n        case '스쿼트':\r\n          return '#2ecc71'; // Green\r\n        default:\r\n          return '#3498db'; // Default Blue\r\n      }\r\n    },\r\n\r\n    getBorderColor(selectedExercise) {\r\n      switch (selectedExercise) {\r\n        case '벤치프레스':\r\n          return '#2980b9'; // Darker Blue\r\n        case '데드리프트':\r\n          return '#c0392b'; // Darker Red\r\n        case '스쿼트':\r\n          return '#27ae60'; // Darker Green\r\n        default:\r\n          return '#2980b9'; // Default Darker Blue\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n.chart-container {\r\n  position: relative;\r\n}\r\n\r\n.button-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  background-color: #fff;\r\n  /* 선택에 따라 색상 조정 */\r\n  padding: 10px;\r\n}\r\n\r\n.cute-button {\r\n  background-color: #3498db;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  margin-right: 10px;\r\n  margin-bottom: 10px;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.cute-button:hover {\r\n  background-color: #2980b9;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}