{"ast":null,"code":"export default {\n  data() {\n    return {\n      weather: null\n    };\n  },\n  computed: {\n    isClearSky() {\n      return this.weather && this.weather.weather[0].description === '맑음';\n    },\n    isCloudy() {\n      return this.weather && this.weather.weather[0].description === '튼구름';\n    },\n    isMist() {\n      return this.weather && this.weather.weather[0].description === '온흐림';\n    },\n    isRain() {\n      return this.weather && this.weather.weather[0].description === '비';\n    },\n    isManyCloudy() {\n      return this.weather && this.weather.weather[0].description === '구름조금';\n    }\n  },\n  methods: {\n    getCurrentLocation() {\n      navigator.geolocation.getCurrentPosition(position => {\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n        console.log(\"현재 위치\", lat, lon);\n        this.getWeatherByCurrentLocation(lat, lon);\n      });\n    },\n    async getWeatherByCurrentLocation(lat, lon) {\n      const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=658d847ef1d28e72e047ab0c5a476d54&units=metric&lang=kr`;\n      const response = await fetch(url);\n      const data = await response.json();\n      this.weather = data;\n    }\n  },\n  mounted() {\n    this.getCurrentLocation();\n  }\n};","map":{"version":3,"names":["data","weather","computed","isClearSky","description","isCloudy","isMist","isRain","isManyCloudy","methods","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","console","log","getWeatherByCurrentLocation","url","response","fetch","json","mounted"],"sources":["src/components/LiveView.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <div class=\"weather-content\">\r\n            <div :class=\"['weather-box', { 'clear-sky': isClearSky, 'cloudy': isCloudy, 'mist': isMist, 'rain': isRain,'manycloudy':isManyCloudy }]\">\r\n\r\n                <!-- 날씨 정보 -->\r\n                <div class=\"location\">\r\n                    <h3>{{ weather && weather.name }}의 현재 날씨</h3>\r\n                </div>\r\n                <div class=\"temperature\">\r\n                    <h3>온도: {{ weather?.main.temp }}°C</h3>\r\n                </div>\r\n                <div class=\"description\">\r\n                    <h2>날씨: {{ weather?.weather[0].description }}</h2>\r\n                </div>\r\n            </div>\r\n            <!-- 날씨 아이콘 -->\r\n        </div>\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n            weather: null,\r\n        };\r\n    },\r\n    computed: {\r\n        isClearSky() {\r\n            return this.weather && this.weather.weather[0].description === '맑음';\r\n        },\r\n        isCloudy() {\r\n            return this.weather && this.weather.weather[0].description === '튼구름';\r\n        },\r\n        isMist() {\r\n            return this.weather && this.weather.weather[0].description === '온흐림';\r\n        },\r\n        isRain() {\r\n            return this.weather && this.weather.weather[0].description === '비';\r\n        },\r\n        isManyCloudy() {\r\n            return this.weather && this.weather.weather[0].description === '구름조금';\r\n        },\r\n    },\r\n    methods: {\r\n        getCurrentLocation() {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                const lat = position.coords.latitude;\r\n                const lon = position.coords.longitude;\r\n                console.log(\"현재 위치\", lat, lon);\r\n                this.getWeatherByCurrentLocation(lat, lon);\r\n            });\r\n        },\r\n        async getWeatherByCurrentLocation(lat, lon) {\r\n            const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=658d847ef1d28e72e047ab0c5a476d54&units=metric&lang=kr`;\r\n            const response = await fetch(url);\r\n            const data = await response.json();\r\n            this.weather = data;\r\n        },\r\n    },\r\n    mounted() {\r\n        this.getCurrentLocation();\r\n    },\r\n};\r\n</script>\r\n  \r\n<style scoped>\r\n.weather-box {\r\n    border-radius: 10px;\r\n    padding: 225px;\r\n    /* 예시로 20px로 변경 */\r\n    text-align: center;\r\n    background-size: cover;\r\n}\r\n\r\n.location h2 {\r\n    font-size: 24px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.temperature h3 {\r\n    font-size: 20px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.description p {\r\n    font-size: 16px;\r\n}\r\n\r\n.clear-sky {\r\n    background-image: url('https://source.unsplash.com/v9bnfMCyKbg/1600x900');\r\n    /* 맑음일 때 배경 이미지 스타일 */\r\n}\r\n\r\n.cloudy {\r\n    background-image: url('http://source.unsplash.com/78wDBw9ajUk/1600x900');\r\n    /* 흐림일 때 배경 이미지 스타일 */\r\n}\r\n.manycloudy {\r\n    background-image: url('http://source.unsplash.com/78wDBw9ajUk/1600x900');\r\n    /* 흐림일 때 배경 이미지 스타일 */\r\n}\r\n\r\n\r\n.mist {\r\n    background-image: url('https://source.unsplash.com/v9bnfMCyKbg/1600x900');\r\n    /* 안개일 때 배경 이미지 스타일 */\r\n}\r\n\r\n.rain {\r\n    background-image: url('https://source.unsplash.com/v9bnfMCyKbg/1600x900');\r\n    /* 비일 때 배경 이미지 스타일 */\r\n}\r\n.weather-content {\r\n    margin-top: 10px; /* 적절한 간격 설정 */\r\n    text-align: center;\r\n}\r\n</style>"],"mappings":"AAsBA;EACAA,KAAA;IACA;MACAC,OAAA;IACA;EACA;EACAC,QAAA;IACAC,WAAA;MACA,YAAAF,OAAA,SAAAA,OAAA,CAAAA,OAAA,IAAAG,WAAA;IACA;IACAC,SAAA;MACA,YAAAJ,OAAA,SAAAA,OAAA,CAAAA,OAAA,IAAAG,WAAA;IACA;IACAE,OAAA;MACA,YAAAL,OAAA,SAAAA,OAAA,CAAAA,OAAA,IAAAG,WAAA;IACA;IACAG,OAAA;MACA,YAAAN,OAAA,SAAAA,OAAA,CAAAA,OAAA,IAAAG,WAAA;IACA;IACAI,aAAA;MACA,YAAAP,OAAA,SAAAA,OAAA,CAAAA,OAAA,IAAAG,WAAA;IACA;EACA;EACAK,OAAA;IACAC,mBAAA;MACAC,SAAA,CAAAC,WAAA,CAAAC,kBAAA,CAAAC,QAAA;QACA,MAAAC,GAAA,GAAAD,QAAA,CAAAE,MAAA,CAAAC,QAAA;QACA,MAAAC,GAAA,GAAAJ,QAAA,CAAAE,MAAA,CAAAG,SAAA;QACAC,OAAA,CAAAC,GAAA,UAAAN,GAAA,EAAAG,GAAA;QACA,KAAAI,2BAAA,CAAAP,GAAA,EAAAG,GAAA;MACA;IACA;IACA,MAAAI,4BAAAP,GAAA,EAAAG,GAAA;MACA,MAAAK,GAAA,0DAAAR,GAAA,QAAAG,GAAA;MACA,MAAAM,QAAA,SAAAC,KAAA,CAAAF,GAAA;MACA,MAAAvB,IAAA,SAAAwB,QAAA,CAAAE,IAAA;MACA,KAAAzB,OAAA,GAAAD,IAAA;IACA;EACA;EACA2B,QAAA;IACA,KAAAjB,kBAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}