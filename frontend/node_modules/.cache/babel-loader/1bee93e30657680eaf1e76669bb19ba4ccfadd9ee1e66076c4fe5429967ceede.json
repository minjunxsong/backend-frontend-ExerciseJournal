{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Chart, BarController, DoughnutController, LineController, PieController, PolarAreaController, RadarController, BubbleController, ScatterController } from 'chart.js';\nvar ChartEmits;\n(function (ChartEmits) {\n  ChartEmits[\"ChartRendered\"] = \"chart:rendered\";\n  ChartEmits[\"ChartUpdated\"] = \"chart:updated\";\n  ChartEmits[\"ChartDestroyed\"] = \"chart:destroyed\";\n  ChartEmits[\"LabelsUpdated\"] = \"labels:updated\";\n})(ChartEmits || (ChartEmits = {}));\nfunction chartCreate(createChartFunction, chartData, chartOptions, context) {\n  createChartFunction(chartData, chartOptions);\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartRendered);\n  }\n}\nfunction chartUpdate(chart, context) {\n  chart.update();\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartUpdated);\n  }\n}\nfunction chartDestroy(chart, context) {\n  chart.destroy();\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartDestroyed);\n  }\n}\nfunction getChartData(data, datasetIdKey) {\n  const nextData = {\n    labels: typeof data.labels === \"undefined\" ? [] : [...data.labels],\n    datasets: []\n  };\n  setChartDatasets(nextData, {\n    ...data\n  }, datasetIdKey);\n  return nextData;\n}\nfunction setChartDatasets(oldData, newData, datasetIdKey) {\n  const addedDatasets = [];\n  oldData.datasets = newData.datasets.map(nextDataset => {\n    // given the new set, find it's current match\n    const currentDataset = oldData.datasets.find(dataset => dataset[datasetIdKey] === nextDataset[datasetIdKey]);\n    // There is no original to update, so simply add new one\n    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n      return {\n        ...nextDataset\n      };\n    }\n    addedDatasets.push(currentDataset);\n    Object.assign(currentDataset, nextDataset);\n    return currentDataset;\n  });\n}\nfunction setChartLabels(chart, labels, context) {\n  chart.data.labels = labels;\n  if (context !== undefined) {\n    context.emit(ChartEmits.LabelsUpdated);\n  }\n}\nfunction setChartOptions(chart, options) {\n  chart.options = {\n    ...options\n  };\n}\nfunction compareData(newData, oldData) {\n  // Get new and old DataSet Labels\n  const newDatasetLabels = newData.datasets.map(dataset => {\n    return dataset.label;\n  });\n  const oldDatasetLabels = oldData.datasets.map(dataset => {\n    return dataset.label;\n  });\n  // Check if Labels are equal and if dataset length is equal\n  return oldData.datasets.length === newData.datasets.length && newDatasetLabels.every((value, index) => value === oldDatasetLabels[index]);\n}\nconst templateError = \"Please remove the <template></template> tags from your chart component. See https://vue-chartjs.org/guide/#vue-single-file-components\";\nconst ANNOTATION_PLUGIN_KEY = \"annotation\";\nfunction generateChart(chartId, chartType, chartController) {\n  let _chartRef = {};\n  return {\n    props: {\n      chartData: {\n        type: Object,\n        required: true\n      },\n      chartOptions: {\n        type: Object,\n        default: () => {}\n      },\n      datasetIdKey: {\n        type: String,\n        default: \"label\"\n      },\n      chartId: {\n        type: String,\n        default: chartId\n      },\n      width: {\n        type: Number,\n        default: 400\n      },\n      height: {\n        type: Number,\n        default: 400\n      },\n      cssClasses: {\n        type: String,\n        default: \"\"\n      },\n      styles: {\n        type: Object,\n        default: () => {}\n      },\n      plugins: {\n        type: Array,\n        default: () => []\n      }\n    },\n    data() {\n      return {\n        _chart: null,\n        _id: Math.random().toString(36).substring(2)\n      };\n    },\n    computed: {\n      hasAnnotationPlugin() {\n        var ref, ref1;\n        const pluginSettings = (ref = this.chartOptions) === null || ref === void 0 ? void 0 : (ref1 = ref.plugins) === null || ref1 === void 0 ? void 0 : ref1[ANNOTATION_PLUGIN_KEY];\n        return typeof pluginSettings !== \"undefined\";\n      }\n    },\n    created() {\n      Chart.register(chartController);\n    },\n    mounted() {\n      _chartRef[this.$data._id] = null;\n      if (\"datasets\" in this.chartData && this.chartData.datasets.length > 0) {\n        chartCreate(this.renderChart, this.chartData, this.chartOptions);\n        this.$emit(ChartEmits.ChartRendered);\n      }\n    },\n    watch: {\n      chartData: {\n        handler: function (newValue, oldValue) {\n          this.chartDataHandler(newValue, oldValue);\n        },\n        deep: true\n      },\n      chartOptions: {\n        handler: function (newValue) {\n          this.chartOptionsHandler(newValue);\n        },\n        deep: true\n      }\n    },\n    methods: {\n      renderChart(data, options) {\n        const currentChart = this.getCurrentChart();\n        if (currentChart !== null) {\n          chartDestroy(currentChart);\n          this.$emit(ChartEmits.ChartDestroyed);\n        }\n        if (!this.$refs.canvas) {\n          throw new Error(templateError);\n        } else {\n          const chartData = getChartData(data, this.datasetIdKey);\n          const canvasEl2DContext = this.$refs.canvas.getContext(\"2d\");\n          if (canvasEl2DContext !== null) {\n            this.setCurrentChart(new Chart(canvasEl2DContext, {\n              type: chartType,\n              data: chartData,\n              options,\n              plugins: this.plugins\n            }));\n          }\n        }\n      },\n      chartDataHandler(newValue, oldValue) {\n        const newData = {\n          ...newValue\n        };\n        const oldData = {\n          ...oldValue\n        };\n        const currentChart = this.getCurrentChart();\n        if (Object.keys(oldData).length > 0) {\n          const isEqualLabelsAndDatasetsLength = compareData(newData, oldData);\n          if (isEqualLabelsAndDatasetsLength && currentChart !== null) {\n            setChartDatasets(currentChart.data, newData, this.datasetIdKey);\n            if (newData.labels !== undefined) {\n              setChartLabels(currentChart, newData.labels);\n              this.$emit(ChartEmits.LabelsUpdated);\n            }\n            this.updateChart();\n            this.$emit(ChartEmits.ChartUpdated);\n          } else {\n            if (currentChart !== null) {\n              chartDestroy(currentChart);\n              this.$emit(ChartEmits.ChartDestroyed);\n            }\n            chartCreate(this.renderChart, this.chartData, this.chartOptions);\n            this.$emit(ChartEmits.ChartRendered);\n          }\n        } else {\n          if (currentChart !== null) {\n            chartDestroy(currentChart);\n            this.$emit(ChartEmits.ChartDestroyed);\n          }\n          chartCreate(this.renderChart, this.chartData, this.chartOptions);\n          this.$emit(ChartEmits.ChartRendered);\n        }\n      },\n      chartOptionsHandler(options) {\n        const currentChart = this.getCurrentChart();\n        if (currentChart !== null) {\n          setChartOptions(currentChart, options);\n          this.updateChart();\n        } else {\n          chartCreate(this.renderChart, this.chartData, this.chartOptions);\n        }\n      },\n      updateChart() {\n        const currentChart = this.getCurrentChart();\n        chartUpdate(currentChart);\n      },\n      getCurrentChart() {\n        return this.hasAnnotationPlugin ? _chartRef[this.$data._id] : this.$data._chart;\n      },\n      setCurrentChart(chart) {\n        this.hasAnnotationPlugin ? _chartRef[this.$data._id] = chart : this.$data._chart = chart;\n      }\n    },\n    beforeDestroy() {\n      const currentChart = this.getCurrentChart();\n      if (currentChart !== null) {\n        chartDestroy(currentChart);\n        this.$emit(ChartEmits.ChartDestroyed);\n      }\n    },\n    render: function (createElement) {\n      return createElement(\"div\", {\n        style: this.styles,\n        class: this.cssClasses\n      }, [createElement(\"canvas\", {\n        attrs: {\n          id: this.chartId,\n          width: this.width,\n          height: this.height\n        },\n        ref: \"canvas\"\n      })]);\n    }\n  };\n}\n/** @type Object */\nconst Bar = /* #__PURE__ */generateChart(\"bar-chart\", \"bar\", BarController);\n/** @type Object */\nconst Doughnut = /* #__PURE__ */generateChart(\"doughnut-chart\", \"doughnut\", DoughnutController);\n/** @type Object */\nconst Line = /* #__PURE__ */generateChart(\"line-chart\", \"line\", LineController);\n/** @type Object */\nconst Pie = /* #__PURE__ */generateChart(\"pie-chart\", \"pie\", PieController);\n/** @type Object */\nconst PolarArea = /* #__PURE__ */generateChart(\"polar-chart\", \"polarArea\", PolarAreaController);\n/** @type Object */\nconst Radar = /* #__PURE__ */generateChart(\"radar-chart\", \"radar\", RadarController);\n/** @type Object */\nconst Bubble = /* #__PURE__ */generateChart(\"bubble-chart\", \"bubble\", BubbleController);\n/** @type Object */\nconst Scatter = /* #__PURE__ */generateChart(\"scatter-chart\", \"scatter\", ScatterController);\nexport { Bar, Bubble, Doughnut, Line, Pie, PolarArea, Radar, Scatter, generateChart };","map":{"version":3,"names":["ChartEmits","chartCreate","createChartFunction","chartData","chartOptions","context","undefined","emit","ChartRendered","chartUpdate","chart","update","ChartUpdated","chartDestroy","destroy","ChartDestroyed","getChartData","data","datasetIdKey","nextData","labels","datasets","setChartDatasets","oldData","newData","addedDatasets","map","nextDataset","currentDataset","find","dataset","includes","push","Object","assign","setChartLabels","LabelsUpdated","setChartOptions","options","compareData","newDatasetLabels","label","oldDatasetLabels","length","every","value","index","templateError","ANNOTATION_PLUGIN_KEY","generateChart","chartId","chartType","chartController","_chartRef","props","type","required","default","String","width","Number","height","cssClasses","styles","plugins","Array","_chart","_id","Math","random","toString","substring","computed","hasAnnotationPlugin","ref","ref1","pluginSettings","created","Chart","register","mounted","$data","renderChart","$emit","watch","handler","newValue","oldValue","chartDataHandler","deep","chartOptionsHandler","methods","currentChart","getCurrentChart","$refs","canvas","Error","canvasEl2DContext","getContext","setCurrentChart","keys","isEqualLabelsAndDatasetsLength","updateChart","beforeDestroy","render","createElement","style","class","attrs","id","Bar","BarController","Doughnut","DoughnutController","Line","LineController","Pie","PieController","PolarArea","PolarAreaController","Radar","RadarController","Bubble","BubbleController","Scatter","ScatterController"],"sources":["../src/utils.ts","src/Charts.js"],"sourcesContent":["import type { ChartType, ChartDataset, DefaultDataPoint } from 'chart.js'\n\nimport type { TChartData, TChartOptions, TypedChartJS } from './types'\n\nimport { SetupContext } from 'vue'\n\nexport enum ChartEmits {\n  ChartRendered = 'chart:rendered',\n  ChartUpdated = 'chart:updated',\n  ChartDestroyed = 'chart:destroyed',\n  LabelsUpdated = 'labels:updated'\n}\n\nexport function chartCreate<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  createChartFunction: (\n    data: TChartData<TType, TData, TLabel>,\n    options: TChartOptions<TType>\n  ) => void,\n  chartData: TChartData<TType, TData, TLabel>,\n  chartOptions: TChartOptions<TType>,\n  context?: SetupContext\n): void {\n  createChartFunction(chartData, chartOptions)\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartRendered)\n  }\n}\n\nexport function chartUpdate<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: TypedChartJS<TType, TData, TLabel>, context?: SetupContext): void {\n  chart.update()\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartUpdated)\n  }\n}\n\nexport function chartDestroy<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: TypedChartJS<TType, TData, TLabel>, context?: SetupContext): void {\n  chart.destroy()\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartDestroyed)\n  }\n}\n\nexport function getChartData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  data: TChartData<TType, TData, TLabel>,\n  datasetIdKey: string\n): TChartData<TType, TData, TLabel> {\n  const nextData = {\n    labels: typeof data.labels === 'undefined' ? [] : [...data.labels],\n    datasets: []\n  }\n\n  setChartDatasets(nextData, { ...data }, datasetIdKey)\n  return nextData\n}\n\nexport function setChartDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  oldData: TChartData<TType, TData, TLabel>,\n  newData: TChartData<TType, TData, TLabel>,\n  datasetIdKey: string\n): void {\n  const addedDatasets: ChartDataset<TType, TData>[] = []\n\n  oldData.datasets = newData.datasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = oldData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      )\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset }\n      }\n\n      addedDatasets.push(currentDataset)\n\n      Object.assign(currentDataset, nextDataset)\n\n      return currentDataset\n    }\n  ) as ChartDataset<TType, TData>[]\n}\n\nexport function setChartLabels<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  chart: TypedChartJS<TType, TData, TLabel>,\n  labels: TLabel[] | undefined,\n  context?: SetupContext\n): void {\n  chart.data.labels = labels\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.LabelsUpdated)\n  }\n}\n\nexport function setChartOptions<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  chart: TypedChartJS<TType, TData, TLabel>,\n  options: TChartOptions<TType>\n): void {\n  chart.options = { ...options }\n}\n\nexport function compareData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  newData: TChartData<TType, TData, TLabel>,\n  oldData: TChartData<TType, TData, TLabel>\n): boolean {\n  // Get new and old DataSet Labels\n  const newDatasetLabels = newData.datasets.map(dataset => {\n    return dataset.label\n  })\n\n  const oldDatasetLabels = oldData.datasets.map(dataset => {\n    return dataset.label\n  })\n\n  // Check if Labels are equal and if dataset length is equal\n  return (\n    oldData.datasets.length === newData.datasets.length &&\n    newDatasetLabels.every((value, index) => value === oldDatasetLabels[index])\n  )\n}\n\nexport const templateError =\n  'Please remove the <template></template> tags from your chart component. See https://vue-chartjs.org/guide/#vue-single-file-components'\n\nexport const chartUpdateError = 'Update ERROR: chart instance not found'\n","import {\n  Chart as ChartJS,\n  BarController,\n  BubbleController,\n  DoughnutController,\n  LineController,\n  PieController,\n  PolarAreaController,\n  RadarController,\n  ScatterController\n} from 'chart.js'\n\nimport {\n  chartCreate,\n  chartDestroy,\n  chartUpdate,\n  getChartData,\n  setChartLabels,\n  setChartDatasets,\n  compareData,\n  templateError,\n  ChartEmits,\n  setChartOptions\n} from '../../src/utils'\n\nconst ANNOTATION_PLUGIN_KEY = 'annotation'\n\nexport function generateChart(chartId, chartType, chartController) {\n  let _chartRef = {}\n\n  return {\n    props: {\n      chartData: {\n        type: Object,\n        required: true\n      },\n      chartOptions: {\n        type: Object,\n        default: () => {}\n      },\n      datasetIdKey: {\n        type: String,\n        default: 'label'\n      },\n      chartId: {\n        type: String,\n        default: chartId\n      },\n      width: {\n        type: Number,\n        default: 400\n      },\n      height: {\n        type: Number,\n        default: 400\n      },\n      cssClasses: {\n        type: String,\n        default: ''\n      },\n      styles: {\n        type: Object,\n        default: () => {}\n      },\n      plugins: {\n        type: Array,\n        default: () => []\n      }\n    },\n    data() {\n      return {\n        _chart: null,\n        _id: Math.random().toString(36).substring(2),\n      }\n    },\n    computed: {\n      hasAnnotationPlugin() {\n        const pluginSettings =\n          this.chartOptions?.plugins?.[ANNOTATION_PLUGIN_KEY]\n\n        return typeof pluginSettings !== 'undefined'\n      }\n    },\n    created() {\n      ChartJS.register(chartController)\n    },\n    mounted() {\n      _chartRef[this.$data._id] = null\n\n      if ('datasets' in this.chartData && this.chartData.datasets.length > 0) {\n        chartCreate(this.renderChart, this.chartData, this.chartOptions)\n        this.$emit(ChartEmits.ChartRendered)\n      }\n    },\n    watch: {\n      chartData: {\n        handler: function (newValue, oldValue) {\n          this.chartDataHandler(newValue, oldValue)\n        },\n        deep: true\n      },\n      chartOptions: {\n        handler: function (newValue) {\n          this.chartOptionsHandler(newValue)\n        },\n        deep: true\n      }\n    },\n    methods: {\n      renderChart(data, options) {\n        const currentChart = this.getCurrentChart()\n\n        if (currentChart !== null) {\n          chartDestroy(currentChart)\n          this.$emit(ChartEmits.ChartDestroyed)\n        }\n\n        if (!this.$refs.canvas) {\n          throw new Error(templateError)\n        } else {\n          const chartData = getChartData(data, this.datasetIdKey)\n\n          const canvasEl2DContext = this.$refs.canvas.getContext('2d')\n\n          if (canvasEl2DContext !== null) {\n            this.setCurrentChart(\n              new ChartJS(canvasEl2DContext, {\n                type: chartType,\n                data: chartData,\n                options,\n                plugins: this.plugins\n              })\n            )\n          }\n        }\n      },\n      chartDataHandler(newValue, oldValue) {\n        const newData = { ...newValue }\n        const oldData = { ...oldValue }\n        const currentChart = this.getCurrentChart()\n\n        if (Object.keys(oldData).length > 0) {\n          const isEqualLabelsAndDatasetsLength = compareData(newData, oldData)\n\n          if (isEqualLabelsAndDatasetsLength && currentChart !== null) {\n            setChartDatasets(currentChart.data, newData, this.datasetIdKey)\n\n            if (newData.labels !== undefined) {\n              setChartLabels(currentChart, newData.labels)\n              this.$emit(ChartEmits.LabelsUpdated)\n            }\n\n            this.updateChart()\n            this.$emit(ChartEmits.ChartUpdated)\n          } else {\n            if (currentChart !== null) {\n              chartDestroy(currentChart)\n              this.$emit(ChartEmits.ChartDestroyed)\n            }\n\n            chartCreate(this.renderChart, this.chartData, this.chartOptions)\n            this.$emit(ChartEmits.ChartRendered)\n          }\n        } else {\n          if (currentChart !== null) {\n            chartDestroy(currentChart)\n            this.$emit(ChartEmits.ChartDestroyed)\n          }\n\n          chartCreate(this.renderChart, this.chartData, this.chartOptions)\n          this.$emit(ChartEmits.ChartRendered)\n        }\n      },\n      chartOptionsHandler(options) {\n        const currentChart = this.getCurrentChart()\n\n        if (currentChart !== null) {\n          setChartOptions(currentChart, options)\n          this.updateChart()\n        } else {\n          chartCreate(this.renderChart, this.chartData, this.chartOptions)\n        }\n      },\n      updateChart() {\n        const currentChart = this.getCurrentChart()\n        chartUpdate(currentChart)\n      },\n      getCurrentChart() {\n        return this.hasAnnotationPlugin ? _chartRef[this.$data._id] : this.$data._chart\n      },\n      setCurrentChart(chart) {\n        this.hasAnnotationPlugin\n          ? (_chartRef[this.$data._id] = chart)\n          : (this.$data._chart = chart)\n      }\n    },\n    beforeDestroy() {\n      const currentChart = this.getCurrentChart()\n\n      if (currentChart !== null) {\n        chartDestroy(currentChart)\n        this.$emit(ChartEmits.ChartDestroyed)\n      }\n    },\n    render: function (createElement) {\n      return createElement(\n        'div',\n        {\n          style: this.styles,\n          class: this.cssClasses\n        },\n        [\n          createElement('canvas', {\n            attrs: {\n              id: this.chartId,\n              width: this.width,\n              height: this.height\n            },\n            ref: 'canvas'\n          })\n        ]\n      )\n    }\n  }\n}\n\n/** @type Object */\nexport const Bar = /* #__PURE__ */ generateChart(\n  'bar-chart',\n  'bar',\n  BarController\n)\n\n/** @type Object */\nexport const Doughnut = /* #__PURE__ */ generateChart(\n  'doughnut-chart',\n  'doughnut',\n  DoughnutController\n)\n\n/** @type Object */\nexport const Line = /* #__PURE__ */ generateChart(\n  'line-chart',\n  'line',\n  LineController\n)\n\n/** @type Object */\nexport const Pie = /* #__PURE__ */ generateChart(\n  'pie-chart',\n  'pie',\n  PieController\n)\n\n/** @type Object */\nexport const PolarArea = /* #__PURE__ */ generateChart(\n  'polar-chart',\n  'polarArea',\n  PolarAreaController\n)\n\n/** @type Object */\nexport const Radar = /* #__PURE__ */ generateChart(\n  'radar-chart',\n  'radar',\n  RadarController\n)\n\n/** @type Object */\nexport const Bubble = /* #__PURE__ */ generateChart(\n  'bubble-chart',\n  'bubble',\n  BubbleController\n)\n\n/** @type Object */\nexport const Scatter = /* #__PURE__ */ generateChart(\n  'scatter-chart',\n  'scatter',\n  ScatterController\n)\n\nexport default {\n  Bar,\n  Bubble,\n  Doughnut,\n  Line,\n  Pie,\n  PolarArea,\n  Radar,\n  Scatter,\n  generateChart\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}