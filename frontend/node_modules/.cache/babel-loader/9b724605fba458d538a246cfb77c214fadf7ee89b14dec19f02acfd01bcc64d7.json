{"ast":null,"code":"import _regeneratorRuntime from \"/Users/songminjun/Desktop/\\u1109\\u1173\\u1106\\u1161\\u1110\\u1173\\u110B\\u1170\\u11B8\\u1103\\u1175\\u110C\\u1161\\u110B\\u1175\\u11AB/health webpage/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/songminjun/Desktop/\\u1109\\u1173\\u1106\\u1161\\u1110\\u1173\\u110B\\u1170\\u11B8\\u1103\\u1175\\u110C\\u1161\\u110B\\u1175\\u11AB/health webpage/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nexport default {\n  data: function data() {\n    return {\n      weather: null\n    };\n  },\n  computed: {\n    isClearSky: function isClearSky() {\n      return this.weather && this.weather.weather[0].description === '맑음';\n    },\n    isCloudy: function isCloudy() {\n      return this.weather && this.weather.weather[0].description === '튼구름';\n    },\n    isMist: function isMist() {\n      return this.weather && this.weather.weather[0].description === '온흐림';\n    },\n    isRain: function isRain() {\n      return this.weather && this.weather.weather[0].description === '비';\n    },\n    isManyCloudy: function isManyCloudy() {\n      return this.weather && this.weather.weather[0].description === '구름조금';\n    }\n  },\n  methods: {\n    getCurrentLocation: function getCurrentLocation() {\n      var _this = this;\n      navigator.geolocation.getCurrentPosition(function (position) {\n        var lat = position.coords.latitude;\n        var lon = position.coords.longitude;\n        console.log(\"현재 위치\", lat, lon);\n        _this.getWeatherByCurrentLocation(lat, lon);\n      });\n    },\n    getWeatherByCurrentLocation: function getWeatherByCurrentLocation(lat, lon) {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var url, response, data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              url = \"https://api.openweathermap.org/data/2.5/weather?lat=\".concat(lat, \"&lon=\").concat(lon, \"&appid=658d847ef1d28e72e047ab0c5a476d54&units=metric&lang=kr\");\n              _context.next = 3;\n              return fetch(url);\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.json();\n            case 6:\n              data = _context.sent;\n              _this2.weather = data;\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    }\n  },\n  mounted: function mounted() {\n    this.getCurrentLocation();\n  }\n};","map":{"version":3,"names":["data","weather","computed","isClearSky","description","isCloudy","isMist","isRain","isManyCloudy","methods","getCurrentLocation","_this","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","console","log","getWeatherByCurrentLocation","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","response","wrap","_callee$","_context","prev","next","concat","fetch","sent","json","stop","mounted"],"sources":["src/components/LiveView.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <div class=\"weather-content\">\r\n            <div :class=\"['weather-box', { 'clear-sky': isClearSky, 'cloudy': isCloudy, 'mist': isMist, 'rain': isRain,'manycloudy':isManyCloudy }]\">\r\n\r\n                <!-- 날씨 정보 -->\r\n                <div class=\"location\">\r\n                    <h3>{{ weather && weather.name }}의 현재 날씨</h3>\r\n                </div>\r\n                <div class=\"temperature\">\r\n                    <h3>온도: {{ weather?.main.temp }}°C</h3>\r\n                </div>\r\n                <div class=\"description\">\r\n                    <h2>날씨: {{ weather?.weather[0].description }}</h2>\r\n                </div>\r\n            </div>\r\n            <!-- 날씨 아이콘 -->\r\n        </div>\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n            weather: null,\r\n        };\r\n    },\r\n    computed: {\r\n        isClearSky() {\r\n            return this.weather && this.weather.weather[0].description === '맑음';\r\n        },\r\n        isCloudy() {\r\n            return this.weather && this.weather.weather[0].description === '튼구름';\r\n        },\r\n        isMist() {\r\n            return this.weather && this.weather.weather[0].description === '온흐림';\r\n        },\r\n        isRain() {\r\n            return this.weather && this.weather.weather[0].description === '비';\r\n        },\r\n        isManyCloudy() {\r\n            return this.weather && this.weather.weather[0].description === '구름조금';\r\n        },\r\n    },\r\n    methods: {\r\n        getCurrentLocation() {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                const lat = position.coords.latitude;\r\n                const lon = position.coords.longitude;\r\n                console.log(\"현재 위치\", lat, lon);\r\n                this.getWeatherByCurrentLocation(lat, lon);\r\n            });\r\n        },\r\n        async getWeatherByCurrentLocation(lat, lon) {\r\n            const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=658d847ef1d28e72e047ab0c5a476d54&units=metric&lang=kr`;\r\n            const response = await fetch(url);\r\n            const data = await response.json();\r\n            this.weather = data;\r\n        },\r\n    },\r\n    mounted() {\r\n        this.getCurrentLocation();\r\n    },\r\n};\r\n</script>\r\n  \r\n<style scoped>\r\n.weather-box {\r\n    border-radius: 10px;\r\n    padding: 225px;\r\n    /* 예시로 20px로 변경 */\r\n    text-align: center;\r\n    background-size: cover;\r\n}\r\n\r\n.location h2 {\r\n    font-size: 24px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.temperature h3 {\r\n    font-size: 20px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.description p {\r\n    font-size: 16px;\r\n}\r\n\r\n.clear-sky {\r\n    background-image: url('https://source.unsplash.com/v9bnfMCyKbg/1600x900');\r\n    /* 맑음일 때 배경 이미지 스타일 */\r\n}\r\n\r\n.cloudy {\r\n    background-image: url('http://source.unsplash.com/78wDBw9ajUk/1600x900');\r\n    /* 흐림일 때 배경 이미지 스타일 */\r\n}\r\n.manycloudy {\r\n    background-image: url('http://source.unsplash.com/78wDBw9ajUk/1600x900');\r\n    /* 흐림일 때 배경 이미지 스타일 */\r\n}\r\n\r\n\r\n.mist {\r\n    background-image: url('https://source.unsplash.com/v9bnfMCyKbg/1600x900');\r\n    /* 안개일 때 배경 이미지 스타일 */\r\n}\r\n\r\n.rain {\r\n    background-image: url('https://source.unsplash.com/v9bnfMCyKbg/1600x900');\r\n    /* 비일 때 배경 이미지 스타일 */\r\n}\r\n.weather-content {\r\n    margin-top: 10px; /* 적절한 간격 설정 */\r\n    text-align: center;\r\n}\r\n</style>"],"mappings":";;;;;;AAsBA;EACAA,IAAA,WAAAA,KAAA;IACA;MACAC,OAAA;IACA;EACA;EACAC,QAAA;IACAC,UAAA,WAAAA,WAAA;MACA,YAAAF,OAAA,SAAAA,OAAA,CAAAA,OAAA,IAAAG,WAAA;IACA;IACAC,QAAA,WAAAA,SAAA;MACA,YAAAJ,OAAA,SAAAA,OAAA,CAAAA,OAAA,IAAAG,WAAA;IACA;IACAE,MAAA,WAAAA,OAAA;MACA,YAAAL,OAAA,SAAAA,OAAA,CAAAA,OAAA,IAAAG,WAAA;IACA;IACAG,MAAA,WAAAA,OAAA;MACA,YAAAN,OAAA,SAAAA,OAAA,CAAAA,OAAA,IAAAG,WAAA;IACA;IACAI,YAAA,WAAAA,aAAA;MACA,YAAAP,OAAA,SAAAA,OAAA,CAAAA,OAAA,IAAAG,WAAA;IACA;EACA;EACAK,OAAA;IACAC,kBAAA,WAAAA,mBAAA;MAAA,IAAAC,KAAA;MACAC,SAAA,CAAAC,WAAA,CAAAC,kBAAA,WAAAC,QAAA;QACA,IAAAC,GAAA,GAAAD,QAAA,CAAAE,MAAA,CAAAC,QAAA;QACA,IAAAC,GAAA,GAAAJ,QAAA,CAAAE,MAAA,CAAAG,SAAA;QACAC,OAAA,CAAAC,GAAA,UAAAN,GAAA,EAAAG,GAAA;QACAR,KAAA,CAAAY,2BAAA,CAAAP,GAAA,EAAAG,GAAA;MACA;IACA;IACAI,2BAAA,WAAAA,4BAAAP,GAAA,EAAAG,GAAA;MAAA,IAAAK,MAAA;MAAA,OAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,GAAA,EAAAC,QAAA,EAAA9B,IAAA;QAAA,OAAA0B,mBAAA,GAAAK,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACAN,GAAA,0DAAAO,MAAA,CAAApB,GAAA,WAAAoB,MAAA,CAAAjB,GAAA;cAAAc,QAAA,CAAAE,IAAA;cAAA,OACAE,KAAA,CAAAR,GAAA;YAAA;cAAAC,QAAA,GAAAG,QAAA,CAAAK,IAAA;cAAAL,QAAA,CAAAE,IAAA;cAAA,OACAL,QAAA,CAAAS,IAAA;YAAA;cAAAvC,IAAA,GAAAiC,QAAA,CAAAK,IAAA;cACAd,MAAA,CAAAvB,OAAA,GAAAD,IAAA;YAAA;YAAA;cAAA,OAAAiC,QAAA,CAAAO,IAAA;UAAA;QAAA,GAAAZ,OAAA;MAAA;IACA;EACA;EACAa,OAAA,WAAAA,QAAA;IACA,KAAA/B,kBAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}